var _, config, getURL, group_id, levelup, moment, postsDb, program, request, requestPosts, sortedUpdated,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

config = require('../config');

request = require('request');

levelup = require('levelup');

_ = require('underscore');

moment = require('moment');

postsDb = {};

program = {};

group_id = "";

sortedUpdated = function(posts) {
    return _.pluck(posts.data, 'updated_time').sort();
};

requestPosts = function(url) {
    return request(url, function(error, response, body) {
        var i, len, newUntil, newUrl, numPostsFetched, post, posts, ref, ref1;
        posts = JSON.parse(body);
        if (error) {
            console.log(error);
            process.exit();
        } else if (indexOf.call(posts, "error") >= 0) {
            console.log(posts.error);
            process.exit();
        }
        numPostsFetched = posts != null ? (ref = posts.data) != null ? ref.length : void 0 : void 0;
        newUntil = moment(_.first(sortedUpdated(posts))).unix() - 1;
        console.log('fetched', numPostsFetched, 'posts. The oldest post fetched was last updated: ' + moment(_.first(sortedUpdated(posts))).format("dddd, MMMM Do YYYY, h:mm:ss a"));
        ref1 = posts.data;
        for (i = 0, len = ref1.length; i < len; i++) {
            post = ref1[i];
            postsDb.put(post.id, post);
        }
        if (program.downloadSince >= newUntil) {
            return process.exit();
        } else if (numPostsFetched > 0) {
            newUrl = getURL(null, newUntil);
            return requestPosts(newUrl);
        } else {
            return process.exit();
        }
    });
};

getURL = function(since, untilTime) {
    var url;
    if (since == null) {
        since = null;
    }
    if (untilTime == null) {
        untilTime = null;
    }
    url = "https://graph.facebook.com/" + program.group_id + "/feed?limit=100&access_token=" + program.accessToken + "& fields=from,to,message,picture,link,name,caption,description,created_time,updated_time,likes,comments.limit(999)";
    if (untilTime == null) {
        url += "&until=" + (moment().unix());
        untilTime = moment().unix();
    } else {
        url += "&until=" + untilTime;
    }
    if (since != null) {
        url += "&since=" + since;
    } else {
        if (program.downloadSince != null) {
            url += "&since=" + program.downloadSince;
        } else {
            url += "&since=0";
        }
    }
    return url;
};

module.exports = function(p) {
    var url;
    program = p;
    config.groupsDb.get(program.group_id, function(err, group) {
        console.log('');
        console.log("Exporting posts and members list for the group \"" + group.name + "\"");
        console.log('');
        return console.log('');
    });
    url = getURL();
    postsDb = levelup(config.dataDir + '/group_' + program.group_id, {
        valueEncoding: 'json'
    });
    group_id = program.group_id;
    return requestPosts(url);
};

// ---
// generated by coffee-script 1.9.2